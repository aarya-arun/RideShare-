version: '3.1'

services:
  zoo:
    image: zookeeper
    restart: on-failure
    hostname: zoo
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181

  rmq:
    image: rabbitmq:3.8.3-alpine

  producer:
    build:
      context: .
      dockerfile: Dockerfile
    command: sh -c "sleep 30 && sudo python3 producer.py"
    container_name: orchestrator
    volumes:
    - .:/code
    - /var/run/docker.sock:/var/run/docker.sock
    - /usr/bin/docker:/usr/bin/docker
    ports: 
    - 80:80
    links:
    - rmq
    - zoo
    depends_on:
    - rmq
    - zoo
    restart: on-failure

  master:
    build:
        context: .
        dockerfile: Dockerfile
    command: sh -c "sleep 15 && python3 pythondbcreate.py && python3 master.py"
    container_name: master
    volumes:
    - .:/code
    - /var/run/docker.sock:/var/run/docker.sock
    - /usr/bin/docker:/usr/bin/docker
    links:
    - rmq
    - zoo
    depends_on:
    - rmq
    - zoo
    restart: on-failure

  slave:
    build:
        context: .
        dockerfile: Dockerfile
    command: sh -c "sleep 15 && python3 pythondbcreate.py && python3 consumer.py"
    container_name: slave
    volumes:
    - .:/code
    - /var/run/docker.sock:/var/run/docker.sock
    - /usr/bin/docker:/usr/bin/docker
    links:
    - rmq
    - zoo
    depends_on:
    - rmq
    - zoo
    restart: on-failure

#  orchestrator:
#    build:
#        context: .
#        dockerfile: Dockerfile
#    command: sh -c "python zk_orch.py"
#    volumes:
#        - .:/code
#    depends_on:
#        - zoo
#    restart: on-failure    

  